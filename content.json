[{"title":"有趣的Chrome DevTools","date":"2015-11-11T13:46:45.000Z","path":"2015/11/11/有趣的ChromeDevTools/","text":"Chrome 自带开发者工具很有趣，怎么个有趣法呢？Chrome的JS控制台有很多很多神奇而且有趣的功能。此文仅例举其中几个，一起来看看吧。 0.清空控制台输出请试着输入 clear() 然后回车，然后是不是感觉一片凉爽，2333~~ 1.jQuery选择器第一个有趣的事情就是获取页面上的DOM元素啦！ 在控制台里通过jQuery选择器选取DOM元素.如 $(&#39;tagName&#39;) $(&#39;.class&#39;) $(&#39;#id&#39;)等选择器。其实是通过document.querySelector(‘’)返回第一个匹配的DOM元素。通过 $$(&#39;tagName&#39;) $$(&#39;.className&#39;)两个$$符号来选择返回的一个相应的DOM数组。瞧： 2.获取DOM元素绑定事件其实也是一句代码搞定的事情，但是在调试的时候却非常有用。通过在控制台输入getEventListeners($(&#39;selector&#39;))返回数组对象的格式并且返回元素绑定的所有事件。然后通过getEventListeners($(&#39;selector&#39;)).click[0].listener获取元素绑定的click事件。 3.Chrome编辑器如果浏览器可以编辑，要记得导出喔😯。在控制台轻轻输入一句代码，然后试着编辑页面，接下来就是奇迹发生的时候！赶快试一下吧！ 4.监测事件通过输入monitorEvents($(&#39;selector&#39;)) 监测元素上绑定的所有事件，该元素某个事件被触发就会在控制台里显示出来。monitorEvents($(&#39;selector&#39;),&#39;eventName&#39;)监听元素上绑定的具体事件。第二个参数代表事件类型的名称。monitorEvents($(&#39;selector&#39;),[&#39;eventName1&#39;,&#39;eventName3&#39;,….])同时检测具体指定的多个事件类型。unmonitorEvents($(&#39;selector&#39;)) 用来停止对某个元素的事件监测。 5.表格形式输出数组先输入数组arr,然后通过输入console.table(variableName)以表格形式查看，如下图： 6.检查元素你可以直接在控制台里输入下面的方法来检查元素inspect($(&#39;selector&#39;)) 会检查所有匹配选择器的DOM元素，并返回所有选择器选择的DOM对象。inspect($(&#39;img&#39;)[1]) 检查并返回页面上第2个img元素。最后，Chrome DevTools是十分强大的调试工具，这只是冰上一角，深入了解请戳chrome-devtools","tags":[{"name":"Chrome DevTools","slug":"Chrome-DevTools","permalink":"http://yoursite.com/tags/Chrome-DevTools/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"五分钟学会简单使用git","date":"2015-09-22T16:00:00.000Z","path":"2015/09/23/五分钟学会简单使用git/","text":"五分钟，简单入门。学会之后可以愉快的管理你的文件啦。 简单使用git 其实很简单，有多简单呢？ 1. git init 初始化一个仓库； 2. git add . 添加文件到暂存区； 3. git commit -m&apos;messeage&apos; 提交至版本库； 4. git push origin master 推送至远程仓库； 分支管理什么是平衡分支？实际工作中一般新建平衡分支用于开发调试等，然后再合并到主分支。 1.git checkout -b dev 新建dev分支并切换到dev分支。 相当于：git branch dev 创建dev分支； git checkout dev 切换到dev分支； 2. 开发或者调试结束后 git add * 添加所有文件到暂存区； git commit -m&apos;messeage&apos; 提交至版本库； 3.git checkout master 切换到主分支； git merge dev 合并分支； git branch -d dev 删除分支； 解决冲突什么是冲突？同一份文件同一个地方被不同的协作者修改了，最后一个推送至远程的会产生冲突。 解决冲突：git pull 更新本地仓库 打开冲突文件，找到冲突部分，协调修改。 1 TODO 2 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 3 我修改的 4 ======= 5 协作者修改的 6 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 经过协调，修改为 1 TODO 2 经过协调修改的 到这里，你已经基本上掌握了git的使用了，想再深入了解，请点击git Pro中文","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"版本控制","slug":"版本控制","permalink":"http://yoursite.com/tags/版本控制/"}]}]